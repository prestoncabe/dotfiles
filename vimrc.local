" Basic look 'n feel
syntax enable
set background=dark
colorscheme solarized

set cursorline

set scrolloff=3
set relativenumber
set noshowmode " since we're using the lightline plugin


" Emacs shortcuts for moving to beginning/end of line
inoremap <C-a> <Home>
inoremap <C-e> <End>


" Speed up switching back to normal mode
set timeoutlen=1000 ttimeoutlen=0


" Change cursor in insert mode
" (assumes iTerm2 on OS X):
" http://vim.wikia.com/wiki/Change_cursor_shape_in_different_modes
if system("if [ $TMUX ]; then echo 1; else echo 0; fi")
  let &t_SI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=1\x7\<Esc>\\"
  let &t_SR = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=2\x7\<Esc>\\"
  let &t_EI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=0\x7\<Esc>\\"
else
  let &t_SI = "\<Esc>]50;CursorShape=1\x7"
  let &t_SR = "\<Esc>]50;CursorShape=2\x7"
  let &t_EI = "\<Esc>]50;CursorShape=0\x7"
endif


" Status bar
let g:lightline = {
      \ 'active': {
      \   'left': [ [ 'mode', 'paste' ],
      \             [ 'fugitive', 'readonly', 'relativepath', 'modified' ] ]
      \ },
      \ 'inactive': {
      \   'left': [ ['relativepath', 'modified' ] ]
      \ },
      \ 'component': {
      \   'readonly': '%{&filetype=="help"?"":&readonly?"тнд":""}',
      \   'modified': '%{&filetype=="help"?"":&modified?"+":&modifiable?"":"-"}',
      \   'fugitive': '%{exists("*fugitive#head")?fugitive#head():""}'
      \ },
      \ 'component_visible_condition': {
      \   'readonly': '(&filetype!="help"&& &readonly)',
      \   'modified': '(&filetype!="help"&&(&modified||!&modifiable))',
      \   'fugitive': '(exists("*fugitive#head") && ""!=fugitive#head())'
      \ },
      \ }


" New hotness for fuzzy finding files
let g:fzf_command_prefix = 'Fzf'
nnoremap <Leader>fe :FzfFiles<CR>
nnoremap <Leader>fb :FzfBuffers<CR>
nnoremap <Leader>ft :FzfTags<CR>
nnoremap <Leader>p :echoe "Use <Leader>fe"<CR>
nnoremap <Leader>pe :echoe "Use <Leader>fe"<CR>

let g:fzf_colors =
\ { 'fg':      ['fg', 'Normal'],
  \ 'bg':      ['bg', 'Normal'],
  \ 'hl':      ['fg', 'Comment'],
  \ 'fg+':     ['fg', 'CursorLine', 'CursorColumn', 'Normal'],
  \ 'bg+':     ['bg', 'CursorLine', 'CursorColumn'],
  \ 'hl+':     ['fg', 'Statement'],
  \ 'info':    ['fg', 'PreProc'],
  \ 'prompt':  ['fg', 'Conditional'],
  \ 'pointer': ['fg', 'Exception'],
  \ 'marker':  ['fg', 'Keyword'],
  \ 'spinner': ['fg', 'Label'],
  \ 'header':  ['fg', 'Comment'] }


" Git
nnoremap <Leader>g :Gstatus<CR>
nnoremap <Leader>gb :Gblame<CR>
nnoremap <Leader>ga :Gwrite<CR>
nnoremap <Leader>gc :Gcommit -v<CR>
nnoremap <Leader>gd :Gdiff<CR>


" Grep stuff from https://robots.thoughtbot.com/faster-grepping-in-vim
nnoremap K :grep! "\b<C-R><C-W>\b"<CR>:cw<CR>

command -nargs=+ -complete=file -bar Ag silent! grep! <args>|cwindow|redraw!
nnoremap <Leader>k :Ag<SPACE>


" RSpec runner customization
let test#ruby#rspec#options = {
  \ 'nearest': '--format documentation',
  \ 'file':    '--format documentation',
  \ 'suite':   '--tag ~slow',
  \}


augroup vimrc.localEx
  autocmd!

  " Set syntax highlighting for BDT PRISM letters
  autocmd BufRead,BufNewFile *.ltr set filetype=ruby

  " Make it more obvious which split you're in
  autocmd WinEnter * call WinEnterHighlight()
  autocmd WinLeave * call WinLeaveUnHighlight()

  function WinEnterHighlight()
    set relativenumber
  endfunction

  function WinLeaveUnHighlight()
    set norelativenumber
  endfunction
augroup END
